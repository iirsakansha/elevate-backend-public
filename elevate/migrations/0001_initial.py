# Generated by Django 5.2.3 on 2025-07-08 04:26

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LoadCategoryModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("commercial", "Commercial"),
                            ("agricultural", "Agricultural"),
                            ("industrial", "Industrial"),
                            ("residential", "Residential"),
                            ("public", "Public"),
                            ("others", "Others"),
                        ],
                        default="",
                        max_length=20,
                        verbose_name="category",
                    ),
                ),
                (
                    "category_file",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=400,
                        null=True,
                        verbose_name="category file",
                    ),
                ),
                (
                    "sales_cagr",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="sales CAGR"
                    ),
                ),
                (
                    "specify_split",
                    models.FloatField(
                        blank=True, default=0, null=True, verbose_name="specify split"
                    ),
                ),
            ],
            options={
                "verbose_name": "load category",
                "verbose_name_plural": "load categories",
            },
        ),
        migrations.CreateModel(
            name="UserAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_name",
                    models.CharField(
                        default="", max_length=50, verbose_name="user name"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=20,
                        null=True,
                        verbose_name="status",
                    ),
                ),
                ("error_log", models.TextField(verbose_name="error log")),
                (
                    "time",
                    models.FloatField(
                        blank=True, default=0.0, null=True, verbose_name="time"
                    ),
                ),
            ],
            options={
                "verbose_name": "user analysis log",
                "verbose_name_plural": "user analyses log",
            },
        ),
        migrations.CreateModel(
            name="VehicleCategoryModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vehicle_category",
                    models.CharField(
                        choices=[
                            ("car", "Car"),
                            ("bus", "Bus"),
                            ("2-wheeler", "2-Wheeler"),
                            ("3-wheeler", "3-Wheeler"),
                            ("others", "Others"),
                        ],
                        default="",
                        max_length=20,
                        verbose_name="vehicle category",
                    ),
                ),
                (
                    "vehicle_count",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="vehicle count"
                    ),
                ),
                (
                    "fuel_efficiency",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="fuel efficiency"
                    ),
                ),
                (
                    "cost_per_unit",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="cost per unit"
                    ),
                ),
                (
                    "penetration_rate",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="penetration rate",
                    ),
                ),
                (
                    "energy_consumption",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        verbose_name="energy consumption",
                    ),
                ),
                (
                    "range_km",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="range (km)"
                    ),
                ),
                (
                    "kwh_capacity",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="kWh capacity"
                    ),
                ),
                (
                    "lifespan_years",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="lifespan (years)",
                    ),
                ),
                (
                    "growth_rate",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="growth rate"
                    ),
                ),
                (
                    "handling_cost",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="handling cost"
                    ),
                ),
                (
                    "subsidy_amount",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="subsidy amount"
                    ),
                ),
                (
                    "usage_factor",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="usage factor"
                    ),
                ),
                (
                    "row_limit_xl",
                    models.PositiveIntegerField(
                        default=2000000, verbose_name="row limit (Excel)"
                    ),
                ),
                (
                    "cagr_v",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="CAGR (vehicles)"
                    ),
                ),
                (
                    "base_electricity_tariff",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="base electricity tariff",
                    ),
                ),
            ],
            options={
                "verbose_name": "vehicle category",
                "verbose_name_plural": "vehicle categories",
            },
        ),
        migrations.CreateModel(
            name="Files",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(upload_to="file_upload/", verbose_name="file"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uploaded_files",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "file",
                "verbose_name_plural": "files",
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.CharField(
                        default="Not assigned",
                        max_length=255,
                        verbose_name="organization",
                    ),
                ),
                (
                    "invitation_status",
                    models.CharField(
                        default="Pending",
                        max_length=50,
                        verbose_name="invitation status",
                    ),
                ),
                (
                    "invitation_username",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="invitation username"
                    ),
                ),
                (
                    "temporary_password",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="temporary password"
                    ),
                ),
                (
                    "invitation_token",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        unique=True,
                        verbose_name="invitation token",
                    ),
                ),
                (
                    "password_reset_token",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="password reset token",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        default="user", max_length=50, verbose_name="role"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "user profile",
                "verbose_name_plural": "user profiles",
            },
        ),
        migrations.CreateModel(
            name="PermanentAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="analysis name"),
                ),
                (
                    "load_category_count",
                    models.PositiveSmallIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(6),
                        ],
                        verbose_name="load category count",
                    ),
                ),
                (
                    "is_load_split",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default="",
                        max_length=20,
                        verbose_name="is load split",
                    ),
                ),
                (
                    "load_split_file",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=400,
                        null=True,
                        verbose_name="load split file",
                    ),
                ),
                (
                    "category_data",
                    models.JSONField(default=list, verbose_name="category data"),
                ),
                (
                    "vehicle_category_count",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="vehicle category count",
                    ),
                ),
                (
                    "vehicle_category_data",
                    models.JSONField(
                        default=list, verbose_name="vehicle category data"
                    ),
                ),
                (
                    "resolution",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="resolution",
                    ),
                ),
                (
                    "br_f",
                    models.CharField(
                        blank=True, default="", max_length=10, verbose_name="BR F"
                    ),
                ),
                (
                    "shared_saving",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="shared saving"
                    ),
                ),
                (
                    "summer_peak_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="summer peak cost",
                    ),
                ),
                (
                    "summer_zero_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="summer zero cost",
                    ),
                ),
                (
                    "summer_op_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="summer operating cost",
                    ),
                ),
                (
                    "winter_peak_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="winter peak cost",
                    ),
                ),
                (
                    "winter_zero_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="winter zero cost",
                    ),
                ),
                (
                    "winter_op_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="winter operating cost",
                    ),
                ),
                (
                    "summer_date",
                    models.JSONField(default=list, verbose_name="summer date"),
                ),
                (
                    "winter_date",
                    models.JSONField(default=list, verbose_name="winter date"),
                ),
                (
                    "summer_peak_start",
                    models.CharField(
                        default="", max_length=10, verbose_name="summer peak start"
                    ),
                ),
                (
                    "summer_peak_end",
                    models.CharField(
                        default="", max_length=10, verbose_name="summer peak end"
                    ),
                ),
                (
                    "summer_sx",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="summer sx",
                    ),
                ),
                (
                    "summer_op_start",
                    models.CharField(
                        default="", max_length=10, verbose_name="summer operating start"
                    ),
                ),
                (
                    "summer_op_end",
                    models.CharField(
                        default="", max_length=10, verbose_name="summer operating end"
                    ),
                ),
                (
                    "summer_rb",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="summer rb",
                    ),
                ),
                (
                    "winter_peak_start",
                    models.CharField(
                        default="00:00", max_length=10, verbose_name="winter peak start"
                    ),
                ),
                (
                    "winter_peak_end",
                    models.CharField(
                        default="00:00", max_length=10, verbose_name="winter peak end"
                    ),
                ),
                (
                    "winter_sx",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="winter sx",
                    ),
                ),
                (
                    "winter_op_start",
                    models.CharField(
                        default="00:00",
                        max_length=10,
                        verbose_name="winter operating start",
                    ),
                ),
                (
                    "winter_op_end",
                    models.CharField(
                        default="00:00",
                        max_length=10,
                        verbose_name="winter operating end",
                    ),
                ),
                (
                    "winter_rb",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="winter rb",
                    ),
                ),
                (
                    "date1_start",
                    models.CharField(
                        default="", max_length=10, verbose_name="date 1 start"
                    ),
                ),
                (
                    "date1_end",
                    models.CharField(
                        default="", max_length=10, verbose_name="date 1 end"
                    ),
                ),
                (
                    "date2_start",
                    models.CharField(
                        default="", max_length=10, verbose_name="date 2 start"
                    ),
                ),
                (
                    "date2_end",
                    models.CharField(
                        default="", max_length=10, verbose_name="date 2 end"
                    ),
                ),
                (
                    "user_name",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=50,
                        null=True,
                        verbose_name="user name",
                    ),
                ),
                (
                    "load_categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_load_categories",
                        to="elevate.loadcategorymodel",
                        verbose_name="load categories",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_analyses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
                (
                    "vehicle_categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_vehicle_categories",
                        to="elevate.vehiclecategorymodel",
                        verbose_name="vehicle categories",
                    ),
                ),
            ],
            options={
                "verbose_name": "permanent analysis",
                "verbose_name_plural": "permanent analyses",
            },
        ),
        migrations.CreateModel(
            name="Analysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="analysis name"),
                ),
                (
                    "load_category_count",
                    models.PositiveSmallIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(6),
                        ],
                        verbose_name="load category count",
                    ),
                ),
                (
                    "is_load_split",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default="",
                        max_length=20,
                        verbose_name="is load split",
                    ),
                ),
                (
                    "load_split_file",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=400,
                        null=True,
                        verbose_name="load split file",
                    ),
                ),
                (
                    "category_data",
                    models.JSONField(default=list, verbose_name="category data"),
                ),
                (
                    "vehicle_category_count",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="vehicle category count",
                    ),
                ),
                (
                    "vehicle_category_data",
                    models.JSONField(
                        default=list, verbose_name="vehicle category data"
                    ),
                ),
                (
                    "resolution",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="resolution",
                    ),
                ),
                (
                    "br_f",
                    models.CharField(
                        blank=True, default="", max_length=10, verbose_name="BR F"
                    ),
                ),
                (
                    "shared_saving",
                    models.IntegerField(
                        blank=True, default=0, null=True, verbose_name="shared saving"
                    ),
                ),
                (
                    "summer_peak_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="summer peak cost",
                    ),
                ),
                (
                    "summer_zero_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="summer zero cost",
                    ),
                ),
                (
                    "summer_op_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="summer operating cost",
                    ),
                ),
                (
                    "winter_peak_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="winter peak cost",
                    ),
                ),
                (
                    "winter_zero_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="winter zero cost",
                    ),
                ),
                (
                    "winter_op_cost",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="winter operating cost",
                    ),
                ),
                (
                    "summer_date",
                    models.JSONField(default=list, verbose_name="summer date"),
                ),
                (
                    "winter_date",
                    models.JSONField(default=list, verbose_name="winter date"),
                ),
                (
                    "summer_peak_start",
                    models.CharField(
                        default="", max_length=10, verbose_name="summer peak start"
                    ),
                ),
                (
                    "summer_peak_end",
                    models.CharField(
                        default="", max_length=10, verbose_name="summer peak end"
                    ),
                ),
                (
                    "summer_sx",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="summer sx",
                    ),
                ),
                (
                    "summer_op_start",
                    models.CharField(
                        default="", max_length=10, verbose_name="summer operating start"
                    ),
                ),
                (
                    "summer_op_end",
                    models.CharField(
                        default="", max_length=10, verbose_name="summer operating end"
                    ),
                ),
                (
                    "summer_rb",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="summer rb",
                    ),
                ),
                (
                    "winter_peak_start",
                    models.CharField(
                        default="00:00", max_length=10, verbose_name="winter peak start"
                    ),
                ),
                (
                    "winter_peak_end",
                    models.CharField(
                        default="00:00", max_length=10, verbose_name="winter peak end"
                    ),
                ),
                (
                    "winter_sx",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="winter sx",
                    ),
                ),
                (
                    "winter_op_start",
                    models.CharField(
                        default="00:00",
                        max_length=10,
                        verbose_name="winter operating start",
                    ),
                ),
                (
                    "winter_op_end",
                    models.CharField(
                        default="00:00",
                        max_length=10,
                        verbose_name="winter operating end",
                    ),
                ),
                (
                    "winter_rb",
                    models.FloatField(
                        blank=True,
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="winter rb",
                    ),
                ),
                (
                    "date1_start",
                    models.CharField(
                        default="", max_length=10, verbose_name="date 1 start"
                    ),
                ),
                (
                    "date1_end",
                    models.CharField(
                        default="", max_length=10, verbose_name="date 1 end"
                    ),
                ),
                (
                    "date2_start",
                    models.CharField(
                        default="", max_length=10, verbose_name="date 2 start"
                    ),
                ),
                (
                    "date2_end",
                    models.CharField(
                        default="", max_length=10, verbose_name="date 2 end"
                    ),
                ),
                (
                    "user_name",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=50,
                        null=True,
                        verbose_name="user name",
                    ),
                ),
                (
                    "file_id",
                    models.PositiveIntegerField(default=0, verbose_name="file ID"),
                ),
                (
                    "is_load_split_file",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=400,
                        null=True,
                        verbose_name="load split file",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_analyses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
                (
                    "load_categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_load_categories",
                        to="elevate.loadcategorymodel",
                        verbose_name="load categories",
                    ),
                ),
                (
                    "vehicle_categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_vehicle_categories",
                        to="elevate.vehiclecategorymodel",
                        verbose_name="vehicle categories",
                    ),
                ),
            ],
            options={
                "verbose_name": "analysis",
                "verbose_name_plural": "analyses",
            },
        ),
    ]
